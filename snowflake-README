--connection to a snowflake account (using AWS)

snowsql  -a gg42143.us-east-1 -u paachary


-- Using a warehouse
USE WAREHOUSE <name>;

-- CREATING A DATABASE
CREATE OR REPLACE DATABASE <name>;

-- CREATING a schema
CREATE OR REPLACE SCHEMA <name>;

-- displaying all schemas under a WH@database
SHOW schemas;

Variant datatype: 
Used to store semi-structured data.

Example for loading an xml file:

1. 
-- CREATING A Raw Source table:

CREATE OR REPLACE TABLE raw_src_tbl
( src VARIANT );

-- Creating an internal stage table

    -- Two options:

        -- 1. Using file_format TYPE paramteter:
        CREATE OR REPLACE STAGE raw_data_stg
        file_format = (type = 'JSON');

        --2. Using only the file_format parameter:

            --a. Create the file_format first

            CREATE OR REPLACE FILE FORMAT my_json_format
            TYPE = 'JSON'
            RECORD_DELIMITER='\\n'
            FIELD_DELIMITER=',';

            --b. Create the staging table with this file format.
            
            CREATE OR REPLACE STAGE raw_data_stg
            file_format = my_json_format;    


-- Loading the stage table with the raw data
PUT file:///home/prashant/snowflake/sales.json @raw_data_stg

-- Copying the data from stage to target

COPY INTO raw_src_tbl
from @raw_data_stg;


-- The entire json data will be stored in the VARIANT data type.
SELECT SUBSTR(src:location:state_city::string,1,2) AS state,
       SUBSTR(src:location:state_city::string,4) AS city, 
       src:location:zip::string as zip,
       src:price::number price,
       TO_TIMESTAMP_NTZ(src:sale_date::string) sale_date
FROM raw_src_tbl;

2.

-- Loading the stage table with the raw data
PUT file:///home/prashant/snowflake/contacts.json @raw_data_stg;

-- Copying the data from stage to target

COPY INTO raw_src_tbl
from @raw_data_stg;

-- The entire json data will be stored in the VARIANT data type.

SELECT * FROM
(
    SELECT src:id::number id, 
           src:name:first::string first_name, 
           c.value:type::string type,
           c.value:content::string content
    FROM raw_src_tbl s, 
         lateral flatten(input => src, path => 'contact') m,
         lateral flatten (input => m.value:business) c
)
PIVOT (max(content) for type IN ('phone','email')) as p(id,first_name, phone, email);


------
Shared Databases

SHARE -> object such as database, tables, views etc which can be imported by other databases / consumers.

Shares are named Snowflake objects that encapsulate all of the information required to share a database. Each share consists of:

    The privileges that grant access to the database(s) and the schema containing the objects to share.

    The privileges that grant access to the specific objects (tables, secure views, and secure UDFs).

    The consumer accounts with which the database and its objects are shared.

    New objects added to a share become immediately available to all consumers, providing real-time access to shared data.
    
    Access to a share (or any of the objects in a share) can be revoked at any time.
    
    
SNOWFLAKE database => provider of data which shares account usage and sample datasets for all accounts.
When an account is created, SNOWFLAKE database is automatically imported into each account from a Share named as ACCOUNT_USAGE.
Contains views similar to DBA* views in oracle.

Command -> show views;

------------------------------

-- creating a secure view ( can be used similar to a VPD in oracle) and are used specifically to enforce data privacy. These views do not enforce query optimization.
-- This is because the Snowflake query optimizer, when evaluating secure views, bypasses certain optimizations used for regular views. 
-- This may result in some impact on query performance for secure views.
CREATE OR REPLACE SECURE VIEW <name> AS <select>

-- Parameter for simuating a shared account

SIMULATED_DATA_SHARING_CONSUMER

--------------------------------------------------------

Process of creating a share

--PRODUCER ACCOUNT--


1. Create a share using ACCOUNT_ADMIN role.

use role accountadmin;

2. Create a share

CREATE OR REPLACE SHARE <name> COMMENT = '<comment>';

3. Grant the necessary privs to the share

3a. Grant USAGE on database
grant usage on database mydb to share mydb_shared;

3b. gramt USAGE on schema
grant usage on schema mydb.public to share mydb_shared;

3c. grant SELECT on objects
grant select on mydb.public.paid_sensitive_data to share mydb_shared;

4. Add accounts to the share

alter share mydb_shared set accounts = <consumer_account1, consumer_account2...>;

---------------------------------------------------------------------------

--CONSUMER consuming the SHARE--:

use role accountadmin;

show shares;

create database mydb_shared1 from share <provider_account>.mydb_shared;

/* Grant privileges on the database to other roles (e.g. SYSADMIN) in your account. */

grant imported privileges on database mydb_shared1 to sysadmin;

use role sysadmin;

show views;

use warehouse <warehouse_name>;

select * from paid_sensitive_data;

---------------------------------------------------------------------------

